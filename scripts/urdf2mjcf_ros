#! /usr/bin/env python
from time import sleep
import rospy
from typing import TypeVar, Union

from xml.etree.ElementTree import Element
from defusedxml.ElementTree import fromstring

from urdf2mjcf.app import full_pipeline
from urdf2mjcf.core import tostring

T = TypeVar("T")


def get_param(param_name: str, default: T = None) -> Union[T, None]:
    closest_param_name = rospy.search_param(param_name)
    if closest_param_name is None:
        return default
    param = rospy.get_param(closest_param_name, default)
    return param


def parse_xml_string(xml: Union[str, None]) -> Union[Element, None]:
    if xml is None:
        return xml
    else:
        return fromstring(xml)


if __name__ == "__main__":
    rospy.init_node("urdf2mjcf")

    urdf_path: str = get_param("urdf_source", "robot_description")  # type: ignore
    xml_destination = get_param("xml_destination", "mujoco_xml")

    while not rospy.has_param(urdf_path) and not rospy.is_shutdown():
        sleep(0.1)

    urdf = get_param(urdf_path)
    sensor_config = get_param("sensor_config", None)
    mujoco_node = get_param("mujoco_node", None)

    result = full_pipeline(
        urdf=fromstring(urdf),
        sensor_config=parse_xml_string(sensor_config),
        mujoco_node=parse_xml_string(mujoco_node),
    )

    rospy.set_param(xml_destination, tostring(result, encoding="unicode"))
